{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetch_data","fetch","method","then","e","console","log","json","catch","error","setState","data","loading","alert","state","member","map","c","react_default","a","createElement","key","netid","name","className","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAiEeA,qBA7Db,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQRQ,WAAa,WAIXC,MAFU,yDAGR,CACEC,OAAQ,QAEPC,KAAM,SAACC,GAER,OADAC,QAAQC,IAAIF,GACLA,EAAEG,SAEVC,MAAO,SAACJ,GAAQ,OAAOC,QAAQI,MAAM,SAAUL,KAC/CD,KAAK,SAAAC,GAQJ,OAPIA,GACFX,EAAKiB,SAAS,CAAEC,KAAMP,EAAEO,OACxBlB,EAAKiB,SAAS,CAAEE,SAAS,KAGzBC,MAAM,6FAEDR,QAAQC,IAAI,WAAYF,MA5BnCX,EAAKqB,MAAQ,CACXH,KAAM,IAHSlB,wEAqCjB,IAAIsB,EAASnB,KAAKkB,MAAMH,KAAKK,IAAI,SAAAC,GAAC,OAChCC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,EAAEK,OACPJ,EAAAC,EAAAC,cAAA,UAAKH,EAAEK,MAAP,MACAJ,EAAAC,EAAAC,cAAA,UAAKH,EAAEM,SAGb,OACEL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAAA,UAAQI,UAAU,cAChBN,EAAAC,EAAAC,cAAA,6HAGAF,EAAAC,EAAAC,cAAA,oFAGAF,EAAAC,EAAAC,cAAA,UAAQK,QAAW7B,KAAKI,YAAxB,eACAkB,EAAAC,EAAAC,cAAA,WAAML,YAtDEW,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC","file":"static/js/main.86038b73.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],   //Json data coming back from \n    };   \n  }\n\n\n\n  fetch_data = () => {\n  \n    var url = 'http://sp19-cs411-46.cs.illinois.edu:8000/api/members/';\n\n    fetch(url,\n      {\n        method: \"GET\",\n       \n      }).then( (e) => {\n        console.log(e);\n        return e.json()\n      })\n      .catch( (e) => { return console.error(\"Error:\", e) })\n      .then(e => {\n        if (e){\n          this.setState({ data: e.data });\n          this.setState({ loading: false });\n        }\n        else {\n          alert(\"Internal Error. The browser is intimidated by some monsters. Maybe refresh and try again.\");\n        }\n        return console.log(\"Success:\", e)\n      });\n\n  }\n\n\n  render() {\n    var member = this.state.data.map(c  =>\n      <tr key={c.netid}>\n          <td>{c.netid}  </td>\n          <td>{c.name}</td>\n      </tr>)\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n           Welcome to the Wine App. The APP in WIP, but you can click the button to interact with our team member database.\n          </p>\n          <p>\n          (It invokes GET request from server that will pull member info from db)\n          </p>\n          <button onClick = {this.fetch_data}>List Member</button>\n          <div>{member}</div>\n\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}